[{"path":"https://docs.ropensci.org/sofa/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/sofa/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/sofa/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/sofa.git Make sure track progress upstream (.e., version sofa ropensci/sofa) git remote add upstream https://github.com/ropensci/sofa.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/sofa","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"install-sofa","dir":"Articles","previous_headings":"","what":"Install sofa","title":"sofa introduction","text":"Stable version Development version Load library","code":"install.packages(\"sofa\") remotes::install_github(\"ropensci/sofa\") library(sofa)"},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"sofa-package-api","dir":"Articles","previous_headings":"","what":"sofa package API","title":"sofa introduction","text":"following breakdown major groups functions - note included. create CouchDB client connection Cushion work databases db_alldocs db_changes db_compact db_create db_delete db_explain db_info db_list db_query db_replicate db_revisions db_index db_index_create db_index_delete work views/design documents design_create design_create_ design_delete design_get design_head design_info design_search design_search_many work documents doc_create doc_delete doc_get doc_head doc_update db_bulk_create db_bulk_update doc_attach_create doc_attach_delete doc_attach_get doc_attach_info","code":""},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"create-a-connection-client","dir":"Articles","previous_headings":"","what":"Create a connection client","title":"sofa introduction","text":"CouchDB instance requires username password make sure pass Cushion$new","code":"(x <- Cushion$new(user=\"admin\", pwd=\"password\")) #> <sofa - cushion>  #>   transport: http #>   host: 127.0.0.1 #>   port: 5984 #>   path:  #>   type:  #>   user: admin #>   pwd: <secret>"},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"ping-your-server","dir":"Articles","previous_headings":"","what":"Ping your server","title":"sofa introduction","text":"","code":"x$ping() #> $couchdb #> [1] \"Welcome\" #>  #> $version #> [1] \"3.1.0\" #>  #> $git_sha #> [1] \"ff0feea20\" #>  #> $uuid #> [1] \"30ed570659e8b72d688cfab563811c53\" #>  #> $features #> $features[[1]] #> [1] \"access-ready\" #>  #> $features[[2]] #> [1] \"partitioned\" #>  #> $features[[3]] #> [1] \"pluggable-storage-engines\" #>  #> $features[[4]] #> [1] \"reshard\" #>  #> $features[[5]] #> [1] \"scheduler\" #>  #>  #> $vendor #> $vendor$name #> [1] \"The Apache Software Foundation\""},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"create-a-new-database","dir":"Articles","previous_headings":"","what":"Create a new database","title":"sofa introduction","text":"","code":"db_create(x, 'cats') #> $ok #> [1] TRUE"},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"list-databases","dir":"Articles","previous_headings":"","what":"List databases","title":"sofa introduction","text":"","code":"db_list(x) #> [1] \"cats\""},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"create-a-document","dir":"Articles","previous_headings":"","what":"Create a document","title":"sofa introduction","text":"another! one , cause 3’s company Note used document id first document creation, second third. Using document id optional. Also note third document additional field “age”.","code":"doc1 <- '{\"name\": \"leo\", \"color\": \"blue\", \"furry\": true, \"size\": 1}' doc_create(x, dbname = \"cats\", doc1, docid = \"bluecat\") #> $ok #> [1] TRUE #>  #> $id #> [1] \"bluecat\" #>  #> $rev #> [1] \"1-41784f190c466d990684003a958c9f39\" doc2 <- '{\"name\": \"samson\", \"color\": \"red\", \"furry\": false, \"size\": 3}' doc_create(x, dbname = \"cats\", doc2) #> $ok #> [1] TRUE #>  #> $id #> [1] \"3e80ffb4c86ccbf35d2c3b3314000bfa\" #>  #> $rev #> [1] \"1-08aef850a23f5ff95869c9cf5d9604dc\" doc3 <- '{\"name\": \"matilda\", \"color\": \"green\", \"furry\": false, \"size\": 5, \"age\": 2}' doc_create(x, dbname = \"cats\", doc3) #> $ok #> [1] TRUE #>  #> $id #> [1] \"3e80ffb4c86ccbf35d2c3b3314001a3a\" #>  #> $rev #> [1] \"1-953d3cfbbebb977fb75940c2bb0c93a1\""},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"changes-feed","dir":"Articles","previous_headings":"","what":"Changes feed","title":"sofa introduction","text":"","code":"db_changes(x, \"cats\") #> $results #> $results[[1]] #> $results[[1]]$seq #> [1] \"1-g1AAAABteJzLYWBgYMpgTmHgzcvPy09JdcjLz8gvLskBCScyJNX___8_K4M5kTEXKMBubJZqnpacjK4Yh_Y8FiDJ0ACk_oNMSWTIAgD59SI-\" #>  #> $results[[1]]$id #> [1] \"3e80ffb4c86ccbf35d2c3b3314000bfa\" #>  #> $results[[1]]$changes #> $results[[1]]$changes[[1]] #> $results[[1]]$changes[[1]]$rev #> [1] \"1-08aef850a23f5ff95869c9cf5d9604dc\" #>  #>  #>  #>  #> $results[[2]] #> $results[[2]]$seq #> [1] \"2-g1AAAABteJzLYWBgYMpgTmHgzcvPy09JdcjLz8gvLskBCScyJNX___8_K4M5kSkXKMBubJZqnpacjK4Yh_Y8FiDJ0ACk_oNMSWTIAgD6OyI_\" #>  #> $results[[2]]$id #> [1] \"3e80ffb4c86ccbf35d2c3b3314001a3a\" #>  #> $results[[2]]$changes #> $results[[2]]$changes[[1]] #> $results[[2]]$changes[[1]]$rev #> [1] \"1-953d3cfbbebb977fb75940c2bb0c93a1\" #>  #>  #>  #>  #> $results[[3]] #> $results[[3]]$seq #> [1] \"3-g1AAAACLeJzLYWBgYMpgTmHgzcvPy09JdcjLz8gvLskBCScyJNX___8_K4M5kSkXKMBubJZqnpacjK4Yh_Y8FiDJ0ACk_kNNYQSbkpZiZmGaaIauJwsAaKQq8g\" #>  #> $results[[3]]$id #> [1] \"bluecat\" #>  #> $results[[3]]$changes #> $results[[3]]$changes[[1]] #> $results[[3]]$changes[[1]]$rev #> [1] \"1-41784f190c466d990684003a958c9f39\" #>  #>  #>  #>  #>  #> $last_seq #> [1] \"3-g1AAAACLeJzLYWBgYMpgTmHgzcvPy09JdcjLz8gvLskBCScyJNX___8_K4M5kSkXKMBubJZqnpacjK4Yh_Y8FiDJ0ACk_kNNYQSbkpZiZmGaaIauJwsAaKQq8g\" #>  #> $pending #> [1] 0"},{"path":"https://docs.ropensci.org/sofa/articles/sofa.html","id":"search","dir":"Articles","previous_headings":"","what":"Search","title":"sofa introduction","text":"simplest search just returns documents. Search cats red Search cats furry Return certain fields Convert result query data.frame using jsonlite","code":"db_query(x, dbname = \"cats\", selector = list(`_id` = list(`$gt` = NULL)))$docs #> [[1]] #> [[1]]$`_id` #> [1] \"3e80ffb4c86ccbf35d2c3b3314000bfa\" #>  #> [[1]]$`_rev` #> [1] \"1-08aef850a23f5ff95869c9cf5d9604dc\" #>  #> [[1]]$name #> [1] \"samson\" #>  #> [[1]]$color #> [1] \"red\" #>  #> [[1]]$furry #> [1] FALSE #>  #> [[1]]$size #> [1] 3 #>  #>  #> [[2]] #> [[2]]$`_id` #> [1] \"3e80ffb4c86ccbf35d2c3b3314001a3a\" #>  #> [[2]]$`_rev` #> [1] \"1-953d3cfbbebb977fb75940c2bb0c93a1\" #>  #> [[2]]$name #> [1] \"matilda\" #>  #> [[2]]$color #> [1] \"green\" #>  #> [[2]]$furry #> [1] FALSE #>  #> [[2]]$size #> [1] 5 #>  #> [[2]]$age #> [1] 2 #>  #>  #> [[3]] #> [[3]]$`_id` #> [1] \"bluecat\" #>  #> [[3]]$`_rev` #> [1] \"1-41784f190c466d990684003a958c9f39\" #>  #> [[3]]$name #> [1] \"leo\" #>  #> [[3]]$color #> [1] \"blue\" #>  #> [[3]]$furry #> [1] TRUE #>  #> [[3]]$size #> [1] 1 db_query(x, dbname = \"cats\", selector = list(color = \"red\"))$docs #> [[1]] #> [[1]]$`_id` #> [1] \"3e80ffb4c86ccbf35d2c3b3314000bfa\" #>  #> [[1]]$`_rev` #> [1] \"1-08aef850a23f5ff95869c9cf5d9604dc\" #>  #> [[1]]$name #> [1] \"samson\" #>  #> [[1]]$color #> [1] \"red\" #>  #> [[1]]$furry #> [1] FALSE #>  #> [[1]]$size #> [1] 3 db_query(x, dbname = \"cats\", selector = list(furry = TRUE))$docs #> [[1]] #> [[1]]$`_id` #> [1] \"bluecat\" #>  #> [[1]]$`_rev` #> [1] \"1-41784f190c466d990684003a958c9f39\" #>  #> [[1]]$name #> [1] \"leo\" #>  #> [[1]]$color #> [1] \"blue\" #>  #> [[1]]$furry #> [1] TRUE #>  #> [[1]]$size #> [1] 1 db_query(x, dbname = \"cats\",          selector = list(size = list(`$gt` = 2)),          fields = c(\"name\", \"color\"))$docs #> [[1]] #> [[1]]$name #> [1] \"samson\" #>  #> [[1]]$color #> [1] \"red\" #>  #>  #> [[2]] #> [[2]]$name #> [1] \"matilda\" #>  #> [[2]]$color #> [1] \"green\" library('jsonlite') res <- db_query(x, dbname = \"cats\",                  selector = list(`_id` = list(`$gt` = NULL)),                  fields = c(\"name\", \"color\", \"furry\", \"size\", \"age\"),                  as = \"json\")  fromJSON(res)$docs #>      name color furry size age #> 1  samson   red FALSE    3  NA #> 2 matilda green FALSE    5   2 #> 3     leo  blue  TRUE    1  NA"},{"path":"https://docs.ropensci.org/sofa/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yaoxiang Li. Author, maintainer. Eduard Szöcs. Author. Scott Chamberlain. Author. . Funder.            https://ropensci.org/","code":""},{"path":"https://docs.ropensci.org/sofa/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li Y, Szöcs E, Chamberlain S (2024). sofa: Connector 'CouchDB'. R package version 0.4.1https://github.com/ropensci/sofa (devel) https://docs.ropensci.org/sofa (docs), https://github.com/ropensci/sofa (devel)https://docs.ropensci.org/sofa (docs).","code":"@Manual{,   title = {sofa: Connector to 'CouchDB'},   author = {Yaoxiang Li and Eduard Szöcs and Scott Chamberlain},   year = {2024},   note = {R package version 0.4.1https://github.com/ropensci/sofa (devel) https://docs.ropensci.org/sofa (docs)},   url = {https://github.com/ropensci/sofa (devel) https://docs.ropensci.org/sofa (docs)}, }"},{"path":"https://docs.ropensci.org/sofa/index.html","id":"sofa","dir":"","previous_headings":"","what":"Connector to CouchDB","title":"Connector to CouchDB","text":"easy interface CouchDB R Note: Check R4couchdb, another R package interact CouchDB. sofa docs: https://docs.ropensci.org/sofa/","code":""},{"path":"https://docs.ropensci.org/sofa/index.html","id":"couchdb-versions","dir":"","previous_headings":"","what":"CouchDB versions","title":"Connector to CouchDB","text":"sofa works CouchDB v2 v3. See builds checks various CouchDB versions.","code":""},{"path":"https://docs.ropensci.org/sofa/index.html","id":"couchdb-info","dir":"","previous_headings":"","what":"CouchDB Info","title":"Connector to CouchDB","text":"Docs: http://docs.couchdb.org/en/latest/index.html Installation: http://docs.couchdb.org/en/latest/install/index.html","code":""},{"path":"https://docs.ropensci.org/sofa/index.html","id":"connect-to-couchdb","dir":"","previous_headings":"","what":"Connect to CouchDB","title":"Connector to CouchDB","text":"may starting terminal/shell opening CouchDB app machine, running Docker. Whatever , start .","code":"couchdb"},{"path":"https://docs.ropensci.org/sofa/index.html","id":"install-sofa","dir":"","previous_headings":"","what":"Install sofa","title":"Connector to CouchDB","text":"CRAN Development version GitHub","code":"install.packages(\"sofa\") remotes::install_github(\"ropensci/sofa\") library('sofa')"},{"path":"https://docs.ropensci.org/sofa/index.html","id":"cushions","dir":"","previous_headings":"","what":"Cushions","title":"Connector to CouchDB","text":"Cushions? ? Since ’s couch gotta use cushions somehow. cushions connection class containing connection info CouchDB instance. See ?Cushion help. example, connecting Cloudant couch: Break parameters: host: base url, without transport (http/https) path: context path appended end url transport: http https port: port connect . Default: 5984. Cloudant, set NULL user: User name service. pwd: Password service, . headers: headers pass requests call Cushion$new() arguments get cushion set local use machine, defaults used. Ping server Nice, ’s working.","code":"z <- Cushion$new(   host = \"stuff.cloudant.com\",   transport = 'https',   port = NULL,   user = 'foobar',   pwd = 'things' ) x <- Cushion$new() x$ping()"},{"path":"https://docs.ropensci.org/sofa/index.html","id":"more","dir":"","previous_headings":"","what":"More","title":"Connector to CouchDB","text":"See docs https://docs.ropensci.org/sofa/ .","code":""},{"path":"https://docs.ropensci.org/sofa/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Connector to CouchDB","text":"Please report issues bugs. License: MIT Get citation information sofa R citation(package = 'sofa') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/sofa/notes.html","id":"query-examples","dir":"","previous_headings":"","what":"query examples","title":"NA","text":"docs: https://docs.cloudant.com/cloudant_query.html field smell values greater 5 field smell values greater 5, return _id smell fields curl -v -XGET -H ‘Content-Type: application/json’ ‘http://localhost:5984/_stats’","code":"curl -v -XPOST -H 'Content-Type: application/json' 'http://localhost:5984/farts/_find' -d '{   \"selector\": {     \"smell\": {       \"$gt\": 5     }   } }' curl -v -XPOST -H 'Content-Type: application/json' 'http://localhost:5984/farts/_find' -d '{   \"selector\": {     \"smell\": {       \"$gt\": 5     }   },   \"fields\": [     \"_id\",     \"smell\"   ] }'"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":null,"dir":"Reference","previous_headings":"","what":"sofa connection client — Cushion","title":"sofa connection client — Cushion","text":"sofa connection client sofa connection client","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sofa connection client — Cushion","text":"object class Cushion, variables accessible host, port, path, transport, user, pwd, headers. Functions callable get headers, make base url sent requests.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"couchdb-versions","dir":"Reference","previous_headings":"","what":"CouchDB versions","title":"sofa connection client — Cushion","text":"sofa built assuming CouchDB version 2 greater. functionality package work versions < 2, may (mango queries, see db_query()). plan support older CouchDB versions per se.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"sofa connection client — Cushion","text":"host (character) host port (integer) port path (character) url path, transport (character) transport schema, (http|https) user (character) username pwd (character) password headers (list) named list headers","code":""},{"path":[]},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"sofa connection client — Cushion","text":"Cushion$new() Cushion$print() Cushion$ping() Cushion$make_url() Cushion$get_headers() Cushion$get_auth() Cushion$version() Cushion$clone()","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"sofa connection client — Cushion","text":"Create new Cushion object","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$new(host, port, path, transport, user, pwd, headers)"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sofa connection client — Cushion","text":"host (character) base URL (without transport), e.g., localhost, 127.0.0.1, foobar.cloudant.com port (numeric) Port. Remember want port set, set parameter NULL. Default: 5984 path (character) context path appended end url. e.g., bar http://foo.com/bar. Default: NULL, ignored transport (character) http https. Default: http user, pwd (character) user name, password. used requests. absent, passed requests headers named list headers. headers used requests. use headers individual requests others, pass headers via ... function call.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"sofa connection client — Cushion","text":"new Cushion object","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"sofa connection client — Cushion","text":"print method Cushion","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$print()"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"sofa connection client — Cushion","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-ping-","dir":"Reference","previous_headings":"","what":"Method ping()","title":"sofa connection client — Cushion","text":"Ping CouchDB server","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$ping(as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"sofa connection client — Cushion","text":"(character) One list (default) json ... curl options passed crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-make-url-","dir":"Reference","previous_headings":"","what":"Method make_url()","title":"sofa connection client — Cushion","text":"Construct full base URL pieces connection object","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$make_url()"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-get-headers-","dir":"Reference","previous_headings":"","what":"Method get_headers()","title":"sofa connection client — Cushion","text":"Get list headers sent request","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$get_headers()"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-get-auth-","dir":"Reference","previous_headings":"","what":"Method get_auth()","title":"sofa connection client — Cushion","text":"Get list auth values, user pwd","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$get_auth()"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-version-","dir":"Reference","previous_headings":"","what":"Method version()","title":"sofa connection client — Cushion","text":"Get CouchDB version numeric","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$version()"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"sofa connection client — Cushion","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"sofa connection client — Cushion","text":"","code":"Cushion$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"sofa connection client — Cushion","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/Cushion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sofa connection client — Cushion","text":"","code":"if (FALSE) { # Create a CouchDB connection client user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  ## metadata x$host x$path x$port x$type  ## ping the CouchDB server x$ping()  ## get CouchDB version x$version()  # create database if (!\"stuff\" %in% db_list(x)) {   db_create(x, \"stuff\") }  # add documents to a database if (!\"sofadb\" %in% db_list(x)) {   db_create(x, \"sofadb\") } doc1 <- '{\"name\": \"drink\", \"beer\": \"IPA\", \"score\": 5}' doc_create(x, dbname=\"sofadb\", docid=\"abeer\", doc1)  # bulk create if (!\"mymtcars\" %in% db_list(x)) {   db_create(x, \"mymtcars\") } db_bulk_create(x, dbname=\"mymtcars\", doc = mtcars) db_list(x)  ## database info db_info(x, \"mymtcars\")  ## list dbs db_list(x)  ## all docs db_alldocs(x, \"mymtcars\", limit = 3)  ## changes db_changes(x, \"mymtcars\")  # With auth # x <- Cushion$new(user = 'sckott', pwd = 'sckott')  # Using Cloudant # z <- Cushion$new(host = \"ropensci.cloudant.com\", transport = 'https', port = NULL, #   user = 'ropensci', pwd = Sys.getenv('CLOUDANT_PWD')) # z # db_list(z) # db_create(z, \"stuff2\") # db_info(z, \"stuff2\") # db_alldocs(z, \"foobar\") }"},{"path":"https://docs.ropensci.org/sofa/reference/active_tasks.html","id":null,"dir":"Reference","previous_headings":"","what":"active tasks — active_tasks","title":"active tasks — active_tasks","text":"active tasks","code":""},{"path":"https://docs.ropensci.org/sofa/reference/active_tasks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"active tasks — active_tasks","text":"","code":"active_tasks(cushion, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/active_tasks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"active tasks — active_tasks","text":"cushion Cushion object. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/active_tasks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"active tasks — active_tasks","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/active_tasks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"active tasks — active_tasks","text":"","code":"if (FALSE) { # Create a CouchDB connection client user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  active_tasks(x) active_tasks(x, as = 'json') }"},{"path":"https://docs.ropensci.org/sofa/reference/attach_get-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an attachment — attach_get","title":"Get an attachment — attach_get","text":"function defunct. See doc_attach_get()","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attach_get-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an attachment — attach_get","text":"","code":"attach_get(...)"},{"path":"https://docs.ropensci.org/sofa/reference/attach_get-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an attachment — attach_get","text":"... ignored","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with attachments — attachments","title":"Work with attachments — attachments","text":"Work attachments","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with attachments — attachments","text":"","code":"doc_attach_create(   cushion,   dbname,   docid,   attachment,   attname,   as = \"list\",   ... )  doc_attach_info(cushion, dbname, docid, attname, ...)  doc_attach_get(cushion, dbname, docid, attname = NULL, type = \"raw\", ...)  doc_attach_delete(cushion, dbname, docid, attname, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with attachments — attachments","text":"cushion Cushion object. Required. dbname (character) Database name. Required. docid (character) Document ID. Required. attachment (character) file name. Required. attname (character) Attachment name. Required. (character) One list (default) json ... Curl args passed HttpClient type (character) one raw (default) text. required.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with attachments — attachments","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with attachments — attachments","text":"Methods: doc_attach_create - create attachment doc_attach_info - get info (headers) attachment doc_attach_get - get attachment. method attempt read object R, gets raw bytes plain text. See examples read attachment types doc_attach_delete - delete attachment","code":""},{"path":"https://docs.ropensci.org/sofa/reference/attachments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with attachments — attachments","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"foodb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"foodb\")) } db_create(x, dbname='foodb')  # create an attachment on an existing document ## create a document first doc <- '{\"name\":\"stuff\", \"drink\":\"soda\"}' doc_create(x, dbname=\"foodb\", doc=doc, docid=\"asoda\")  ## create a csv attachment row.names(mtcars) <- NULL file <- tempfile(fileext = \".csv\") write.csv(mtcars, file = file, row.names = FALSE) doc_attach_create(x, dbname=\"foodb\", docid=\"asoda\",   attachment=file, attname=\"mtcarstable.csv\")  ## create a binary (png) attachment file <- tempfile(fileext = \".png\") png(file) plot(1:10) dev.off() doc_attach_create(x, dbname=\"foodb\", docid=\"asoda\",   attachment=file, attname=\"img.png\")  ## create a binary (pdf) attachment file <- tempfile(fileext = \".pdf\") pdf(file) plot(1:10) dev.off() doc_attach_create(x, dbname=\"foodb\", docid=\"asoda\",   attachment=file, attname=\"plot.pdf\")  # get info for an attachment (HEAD request) doc_attach_info(x, \"foodb\", docid=\"asoda\", attname=\"mtcarstable.csv\") doc_attach_info(x, \"foodb\", docid=\"asoda\", attname=\"img.png\") doc_attach_info(x, \"foodb\", docid=\"asoda\", attname=\"plot.pdf\")  # get an attachment (GET request) res <- doc_attach_get(x, \"foodb\", docid=\"asoda\",   attname=\"mtcarstable.csv\", type = \"text\") read.csv(text = res) doc_attach_get(x, \"foodb\", docid=\"asoda\", attname=\"img.png\") doc_attach_get(x, \"foodb\", docid=\"asoda\", attname=\"plot.pdf\") ## OR, don't specify an attachment and list the attachments (attchms <- doc_attach_get(x, \"foodb\", docid=\"asoda\", type=\"text\")) jsonlite::fromJSON(attchms)  # delete an attachment doc_attach_delete(x, \"foodb\", docid=\"asoda\", attname=\"mtcarstable.csv\") doc_attach_delete(x, \"foodb\", docid=\"asoda\", attname=\"img.png\") doc_attach_delete(x, \"foodb\", docid=\"asoda\", attname=\"plot.pdf\") }"},{"path":"https://docs.ropensci.org/sofa/reference/databases.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with databases in your CouchDB's. — databases","title":"Work with databases in your CouchDB's. — databases","text":"Work databases CouchDB's.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/databases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with databases in your CouchDB's. — databases","text":"following functions working databases: db_create() - Create database db_delete() - Delete database db_info() - Get info database db_list() - List databases db_replicate() - Replicate database one couch another","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_alldocs.html","id":null,"dir":"Reference","previous_headings":"","what":"List all docs in a given database. — db_alldocs","title":"List all docs in a given database. — db_alldocs","text":"List docs given database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_alldocs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all docs in a given database. — db_alldocs","text":"","code":"db_alldocs(   cushion,   dbname,   descending = NULL,   startkey = NULL,   endkey = NULL,   limit = NULL,   include_docs = FALSE,   as = \"list\",   disk = NULL,   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_alldocs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all docs in a given database. — db_alldocs","text":"cushion Cushion object. Required. dbname Database name. (character) descending Return descending order? (logical) startkey Document ID start . (character) endkey Document ID end . (character) limit Number document IDs return. (numeric) include_docs (logical) TRUE, returns docs , addition IDs. Default: FALSE (character) One list (default) json disk write disk . default, data R session; give file path, write data disk get back file path. default, save R session ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_alldocs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all docs in a given database. — db_alldocs","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_alldocs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all docs in a given database. — db_alldocs","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"leothelion\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"leothelion\")) } db_create(x, dbname='leothelion') db_bulk_create(x, mtcars, dbname=\"leothelion\")  db_alldocs(x, dbname=\"leothelion\") db_alldocs(x, dbname=\"leothelion\", as='json') db_alldocs(x, dbname=\"leothelion\", limit=2) db_alldocs(x, dbname=\"leothelion\", limit=2, include_docs=TRUE)  # curl options res <- db_alldocs(x, dbname=\"leothelion\", verbose = TRUE)  # write data to disk - useful when data is very large ## create omdb dataset first file <- system.file(\"examples/omdb.json\", package = \"sofa\") strs <- readLines(file) if (\"omdb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"omdb\")) } db_create(x, dbname='omdb') invisible(db_bulk_create(x, \"omdb\", strs))  ## get all docs, writing them to disk res <- db_alldocs(x, dbname=\"omdb\", disk = (f <- tempfile(fileext=\".json\"))) res readLines(res, n = 10) }"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create documents via the bulk API — db_bulk_create","title":"Create documents via the bulk API — db_bulk_create","text":"Create documents via bulk API","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create documents via the bulk API — db_bulk_create","text":"","code":"db_bulk_create(   cushion,   dbname,   doc,   docid = NULL,   how = \"rows\",   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create documents via the bulk API — db_bulk_create","text":"cushion Cushion object. Required. dbname (character) Database name. Required. doc data.frame, list, JSON character string. Required. docid Document IDs, ignored now, eventually, can pass list, vector ids document created. length number documents. (character) One rows (default) columns. rows, row becomes separate document; columns, column becomes separate document. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create documents via the bulk API — db_bulk_create","text":"Either list json (depending parameter), element array key:value pairs: ok - whether creation successful id - document id rev - revision id","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create documents via the bulk API — db_bulk_create","text":"Note row.names dropped data.frame inputs.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create documents via the bulk API — db_bulk_create","text":"","code":"if (FALSE) { # initialize a CouchDB connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # From a data.frame if (\"bulktest\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulktest\")) } db_create(x, dbname=\"bulktest\") db_bulk_create(x, \"bulktest\", mtcars)  if (\"bulktest2\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulktest2\")) } db_create(x, dbname=\"bulktest2\") db_bulk_create(x, \"bulktest2\", iris)  # data.frame with 1 or more columns as neseted lists mtcars$stuff <- list(\"hello_world\") mtcars$stuff2 <- list(\"hello_world\",\"things\") if (\"bulktest3\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulktest3\")) } db_create(x, dbname=\"bulktest3\") db_bulk_create(x, \"bulktest3\", mtcars)  # From a json character string, or more likely, many json character strings library(\"jsonlite\") strs <- as.character(parse_df(mtcars, \"columns\")) if (\"bulkfromchr\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulkfromchr\")) } db_create(x, dbname=\"bulkfromchr\") db_bulk_create(x, \"bulkfromchr\", strs)  # From a list of lists library(\"jsonlite\") lst <- parse_df(mtcars, tojson=FALSE) if (\"bulkfromchr\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulkfromchr\")) } db_create(x, dbname=\"bulkfromchr\") db_bulk_create(x, \"bulkfromchr\", lst)  # iris dataset - by rows if (\"irisrows\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"irisrows\")) } db_create(x, dbname=\"irisrows\") db_bulk_create(x, \"irisrows\", apply(iris, 1, as.list))  # iris dataset - by columns - doesn't quite work yet # if (\"iriscolumns\" %in% db_list(x)) { #   invisible(db_delete(x, dbname=\"iriscolumns\")) # } # db_create(x, dbname=\"iriscolumns\") # db_bulk_create(x, \"iriscolumns\", parse_df(iris, \"columns\", tojson=FALSE), how=\"columns\") }"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Query many documents at once — db_bulk_get","title":"Query many documents at once — db_bulk_get","text":"Query many documents ","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query many documents at once — db_bulk_get","text":"","code":"db_bulk_get(cushion, dbname, docid_rev, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query many documents at once — db_bulk_get","text":"cushion Cushion object. Required. dbname (character) Database name. Required. docid_rev list named lists, must slot id, optionally rev revision document id (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query many documents at once — db_bulk_get","text":"Either list json (depending parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query many documents at once — db_bulk_get","text":"","code":"if (FALSE) { # initialize a CouchDB connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"bulkgettest\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulkgettest\")) } db_create(x, dbname=\"bulkgettest\") db_bulk_create(x, \"bulkgettest\", mtcars) res <- db_query(x, dbname = \"bulkgettest\", selector = list(cyl = 8))  # with ids only ids <- vapply(res$docs, \"[[\", \"\", \"_id\") ids_only <- lapply(ids[1:5], function(w) list(id = w)) db_bulk_get(x, \"bulkgettest\", docid_rev = ids_only)  # with ids and revs ids_rev <- lapply(res$docs[1:3],   function(w) list(id = w$`_id`, rev = w$`_rev`)) db_bulk_get(x, \"bulkgettest\", docid_rev = ids_rev) }"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Create documents via the bulk API — db_bulk_update","title":"Create documents via the bulk API — db_bulk_update","text":"Create documents via bulk API","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create documents via the bulk API — db_bulk_update","text":"","code":"db_bulk_update(   cushion,   dbname,   doc,   docid = NULL,   how = \"rows\",   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create documents via the bulk API — db_bulk_update","text":"cushion Cushion object. Required. dbname (character) Database name. Required. doc now, data.frame . Required. docid Document IDs, ignored now, eventually, can pass list, vector ids document created. length number documents. (character) One rows (default) columns. rows, row becomes separate document; columns, column becomes separate document. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create documents via the bulk API — db_bulk_update","text":"Either list json (depending parameter), element array key:value pairs: ok - whether creation successful id - document id rev - revision id","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_bulk_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create documents via the bulk API — db_bulk_update","text":"","code":"if (FALSE) { # initialize a CouchDB connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  row.names(mtcars) <- NULL  if (\"bulktest\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"bulktest\")) } db_create(x, dbname=\"bulktest\") db_bulk_create(x, mtcars, dbname=\"bulktest\")  # modify mtcars mtcars$letter <- sample(letters, NROW(mtcars), replace = TRUE) db_bulk_update(x, \"bulktest\", mtcars)  # change again mtcars$num <- 89 db_bulk_update(x, \"bulktest\", mtcars) }"},{"path":"https://docs.ropensci.org/sofa/reference/db_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"List changes to a database. — db_changes","title":"List changes to a database. — db_changes","text":"course make much sense use certain options _changes. example, using feed=longpoll continuous make much sense within R .","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List changes to a database. — db_changes","text":"","code":"db_changes(   cushion,   dbname,   descending = NULL,   startkey = NULL,   endkey = NULL,   since = NULL,   limit = NULL,   include_docs = NULL,   feed = \"normal\",   heartbeat = NULL,   filter = NULL,   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List changes to a database. — db_changes","text":"cushion Cushion object. Required. dbname Database name. (character) descending Return descending order? (logical) startkey Document ID start . (character) endkey Document ID end . (character) since Start results change immediately given sequence number. limit Number document IDs return. (numeric) include_docs (character) \"true\", returns docs , addition IDs feed Select type feed. One normal, longpoll, continuous. See description. (character) heartbeat Period milliseconds empty line sent results. applicable longpoll continuous feeds. Overrides timeout keep feed alive indefinitely. (numeric (milliseconds)) filter Reference filter function design document selectively get updates. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List changes to a database. — db_changes","text":"Either list json (depending parameter), keys: results - Changes made database, length 0 changes. : changes - List document`s leafs single field rev id - Document ID seq - Update sequence last_seq - Last change update sequence pending - Count remaining items feed","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List changes to a database. — db_changes","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"leoalion\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"leoalion\")) } db_create(x, dbname='leoalion')  # no changes res <- db_changes(x, dbname=\"leoalion\") res$results  # create a document doc1 <- '{\"name\": \"drink\", \"type\": \"water\", \"score\": 5}' doc_create(x, dbname=\"leoalion\", doc1, docid=\"awater\")  # now there's changes res <- db_changes(x, dbname=\"leoalion\") res$results  # as JSON db_changes(x, dbname=\"leoalion\", as='json') }"},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":null,"dir":"Reference","previous_headings":"","what":"Request compaction of the specified database — db_compact","title":"Request compaction of the specified database — db_compact","text":"Request compaction specified database","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request compaction of the specified database — db_compact","text":"","code":"db_compact(cushion, dbname, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request compaction of the specified database — db_compact","text":"cushion Cushion object. Required. dbname Database name. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request compaction of the specified database — db_compact","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Request compaction of the specified database — db_compact","text":"Compaction compresses disk database file performing following operations: Writes new, optimised, version database file, removing unused sections new version write. new file temporarily created purpose, may require twice current storage space specified database order compaction routine complete. Removes old revisions documents database, per-database limit specified _revs_limit database parameter. Compaction can requested individual database; compact databases CouchDB instance. compaction process runs background process. can determine compaction process operating database obtaining database meta information, compact_running value returned database structure set true. See GET /db. can also obtain list running processes determine whether compaction currently running. See \"/_active_tasks\"","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_compact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request compaction of the specified database — db_compact","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd)) # db_compact(x, dbname = \"iris\") }"},{"path":"https://docs.ropensci.org/sofa/reference/db_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a database. — db_create","title":"Create a database. — db_create","text":"Create database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a database. — db_create","text":"","code":"db_create(cushion, dbname, delifexists = FALSE, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a database. — db_create","text":"cushion Cushion object. Required. dbname Database name delifexists TRUE, delete database name creating . useful testing. Default: FALSE (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a database. — db_create","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a database. — db_create","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"leothetiger\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"leothetiger\")) } db_create(x, dbname='leothetiger')  ## see if its there now db_list(x) }"},{"path":"https://docs.ropensci.org/sofa/reference/db_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a database. — db_delete","title":"Delete a database. — db_delete","text":"Delete database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a database. — db_delete","text":"","code":"db_delete(cushion, dbname, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a database. — db_delete","text":"cushion Cushion object. Required. dbname Database name (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a database. — db_delete","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a database. — db_delete","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # local databasees ## create database first, then delete db_create(x, dbname='newdb') db_delete(x, dbname='newdb')  ## with curl info while doing request library('crul') db_create(x, 'newdb') db_delete(x, 'newdb', verbose = TRUE) }"},{"path":"https://docs.ropensci.org/sofa/reference/db_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain API — db_explain","title":"Explain API — db_explain","text":"Explain API","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain API — db_explain","text":"","code":"db_explain(   cushion,   dbname,   query = NULL,   selector = NULL,   limit = NULL,   skip = NULL,   sort = NULL,   fields = NULL,   use_index = NULL,   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain API — db_explain","text":"cushion Cushion object. Required. dbname Database name query (character) instead using parameters, can compose one R list json blob selector (json) - JSON object describing criteria used select documents. information provided section selector syntax. See query_tutorial package, selectors docs http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-selectors limit (number) - Maximum number results returned. Default: 25 Optional skip (number) - Skip first 'n' results, 'n' value specified. Optional sort (json) - JSON array following sort syntax. Optional. See http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-sort reason, sort work often, sure . fields (json) - JSON array specifying fields object returned. omitted, entire object returned. information provided section filtering fields. Optional See http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-filter use_index (json) - Instruct query use specific index. Specified either <design_document> [\"<design_document>\", \"<index_name>\"]. Optional (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain API — db_explain","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain API — db_explain","text":"","code":"if (FALSE) { ## create a connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  file <- system.file(\"examples/omdb.json\", package = \"sofa\") strs <- readLines(file)  ## create a database if (\"omdb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"omdb\")) } db_create(x, dbname='omdb')  ## add some documents invisible(db_bulk_create(x, \"omdb\", strs))  ## query all in one json blob db_explain(x, dbname = \"omdb\", query = '{   \"selector\": {     \"_id\": {       \"$gt\": null     }   } }') }"},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and get database indexes — db_index","title":"Create and get database indexes — db_index","text":"Create get database indexes","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and get database indexes — db_index","text":"","code":"db_index(cushion, dbname, as = \"list\", ...)  db_index_create(cushion, dbname, body, as = \"list\", ...)  db_index_delete(cushion, dbname, design, index_name, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and get database indexes — db_index","text":"cushion Cushion object. Required. dbname (character) Database name, required (character) One list (default) json ... Curl args passed HttpClient body (named list) index fields, required design (character) Design document name index_name (character) index name","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and get database indexes — db_index","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":"body-parameters","dir":"Reference","previous_headings":"","what":"Body parameters","title":"Create and get database indexes — db_index","text":"index (json) - JSON object describing index create. ddoc (string) - Name design document index created. default, index created design document. Indexes can grouped design documents efficiency. However, change one index design document invalidate indexes document (similar views). Optional name (string) - Name index. name provided, name generated automatically. Optional type (string) - Can \"json\" \"text\". Defaults json. Geospatial indexes supported future. Optional Text indexes supported via third party library Optional partial_filter_selector (json) - selector apply documents indexing time, creating partial index. Optional","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and get database indexes — db_index","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # create a database first if (\"testing\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"testing\")) } db_create(x, \"testing\")  # get indexes db_index(x, \"testing\")  # create indexes body <- list(index = list(fields = I(\"foo\")), name = \"foo-index\", type = \"json\") db_index_create(x, \"testing\", body = body)  # get indexes, after creating another index db_index(x, \"testing\")  # delete an index res <- db_index(x, \"testing\") db_index_delete(x, \"testing\", res$indexes[[2]]$ddoc, res$indexes[[2]]$name) ## and it's gone db_index(x, \"testing\") }"},{"path":"https://docs.ropensci.org/sofa/reference/db_info.html","id":null,"dir":"Reference","previous_headings":"","what":"List database info. — db_info","title":"List database info. — db_info","text":"List database info.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List database info. — db_info","text":"","code":"db_info(cushion, dbname, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List database info. — db_info","text":"cushion Cushion object. Required. dbname Database name (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List database info. — db_info","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List database info. — db_info","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, dbname='sofadb')  db_info(x, dbname=\"sofadb\") db_info(x, dbname=\"sofadb\", as='json') }"},{"path":"https://docs.ropensci.org/sofa/reference/db_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List all databases. — db_list","title":"List all databases. — db_list","text":"List databases.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all databases. — db_list","text":"","code":"db_list(cushion, simplify = TRUE, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all databases. — db_list","text":"cushion Cushion object. Required. simplify (logical) Simplify character vector, ignored =\"json\" (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all databases. — db_list","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all databases. — db_list","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  db_list(x) db_list(x, as = 'json') }"},{"path":"https://docs.ropensci.org/sofa/reference/db_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a database. — db_query","title":"Query a database. — db_query","text":"Query database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a database. — db_query","text":"","code":"db_query(   cushion,   dbname,   query = NULL,   selector = NULL,   limit = NULL,   skip = NULL,   sort = NULL,   fields = NULL,   use_index = NULL,   r = NULL,   bookmark = NULL,   update = NULL,   stable = NULL,   stale = NULL,   execution_stats = FALSE,   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/db_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a database. — db_query","text":"cushion Cushion object. Required. dbname Database name query (character) instead using parameters, can compose one R list json blob selector (list/json) - JSON object describing criteria used select documents. information provided section selector syntax. See query_tutorial package, selectors docs http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-selectors limit (numeric) - Maximum number results returned. Default 25. Optional skip (numeric) - Skip first 'n' results, 'n' value specified. Optional sort (json) - JSON array following sort syntax. Optional. See http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-sort reason, sort work often, sure . fields (json) - JSON array specifying fields object returned. omitted, entire object returned. information provided section filtering fields. Optional See http://docs.couchdb.org/en/2.0.0/api/database/find.html#find-filter use_index (json) - Instruct query use specific index. Specified either <design_document> [\"<design_document>\", \"<index_name>\"]. Optional r (numeric) Read quorum needed result. defaults 1, case document found index returned. set higher value, document read least many replicas returned results. likely take time using document stored locally index. Optional, default: 1 bookmark (character) string enables specify page results require. Used paging result sets. Every query returns opaque string bookmark key can passed back query get next page results. part selector query changes requests, results undefined. Optional, default: NULL update (logical) Whether update index prior returning result. Default true. Optional stable (logical) Whether view results returned “stable” set shards. Optional stale (character) Combination update=FALSE stable=TRUE options. Possible options: \"ok\", \"FALSE\" (default). Optional execution_stats (logical) Include execution statistics query response. Optional, default: FALSE (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a database. — db_query","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a database. — db_query","text":"","code":"if (FALSE) { ## create a connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  file <- system.file(\"examples/omdb.json\", package = \"sofa\") strs <- readLines(file)  ## create a database if (\"omdb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"omdb\")) } db_create(x, dbname='omdb')  ## add some documents invisible(db_bulk_create(x, \"omdb\", strs))  ## query all in one json blob db_query(x, dbname = \"omdb\", query = '{   \"selector\": {     \"_id\": {       \"$gt\": null     }   } }')  ## query with each parameter db_query(x, dbname = \"omdb\",   selector = list(`_id` = list(`$gt` = NULL)))  db_query(x, dbname = \"omdb\",   selector = list(`_id` = list(`$gt` = NULL)), limit = 3)  # fields ## single field works db_query(x, dbname = \"omdb\",   selector = list(`_id` = list(`$gt` = NULL)), limit = 3,   fields = c('_id', 'Actors', 'imdbRating'))  ## as well as many fields db_query(x, dbname = \"omdb\",   selector = list(`_id` = list(`$gt` = NULL)), limit = 3,   fields = '_id')  ## other queries db_query(x, dbname = \"omdb\",   selector = list(Year = list(`$gt` = \"2013\")))  db_query(x, dbname = \"omdb\", selector = list(Rated = \"R\"))  db_query(x, dbname = \"omdb\",   selector = list(Rated = \"PG\", Language = \"English\"))  db_query(x, dbname = \"omdb\", selector = list(   `$or` = list(     list(Director = \"Jon Favreau\"),     list(Director = \"Spike Lee\")   ) ), fields = c(\"_id\", \"Director\"))  ## when selector vars are of same name, use a JSON string ## b/c R doesn't let you have a list with same name slots db_query(x, dbname = \"omdb\", query = '{   \"selector\": {     \"Year\": {\"$gte\": \"1990\"},     \"Year\": {\"$lte\": \"2000\"},     \"$not\": {\"Year\": \"1998\"}   },   \"fields\": [\"_id\", \"Year\"] }')  ## regex db_query(x, dbname = \"omdb\", selector = list(   Director = list(`$regex` = \"^R\") ), fields = c(\"_id\", \"Director\"))  }"},{"path":"https://docs.ropensci.org/sofa/reference/db_replicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","title":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","text":"Upload (replicate) local database remote database server, e.g., Cloudant, Iriscouch","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_replicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","text":"","code":"db_replicate(from, to, dbname, createdb = FALSE, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_replicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","text":"Couch replicate . object class Cushion. Required. Remote couch replicate . object class Cushion. Required. dbname (character) Database name. Required. createdb TRUE, function creates db remote server uploading. db exist uploading, either separately fxn can . Default: FALSE (character) One list (default) json ... Curl args passed crul::HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_replicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_replicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload (replicate) a local database to a remote database server,\ne.g., Cloudant, Iriscouch — db_replicate","text":"","code":"if (FALSE) { if (interactive()) { ## create a connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # Create a database locally db_list(x) if (\"hello_earth\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"hello_earth\")) } db_create(x, 'hello_earth')  ## replicate to a remote server z <- Cushion$new(host = \"ropensci.cloudant.com\", transport = 'https',   port = NULL, user = 'ropensci', pwd = Sys.getenv('CLOUDANT_PWD'))  ## do the replication db_replicate(x, z, dbname = \"hello_earth\")  ## check changes on the remote db_list(z) db_changes(z, dbname = \"hello_earth\")  ## make some changes on the remote doc_create(z, dbname = \"hello_earth\",   '{\"language\":\"python\",\"library\":\"requests\"}', 'stuff') changes(z, dbname = \"hello_earth\")  ## create another document, and try to get it doc_create(z, dbname = \"hello_earth\", doc = '{\"language\":\"R\"}',   docid=\"R_rules\") doc_get(z, dbname = \"hello_earth\", docid='R_rules')  ## cleanup - delete the database db_delete(z, 'hello_earth') } }"},{"path":"https://docs.ropensci.org/sofa/reference/db_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get document revisions. — db_revisions","title":"Get document revisions. — db_revisions","text":"Get document revisions.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get document revisions. — db_revisions","text":"","code":"db_revisions(cushion, dbname, docid, simplify = TRUE, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/db_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get document revisions. — db_revisions","text":"cushion Cushion object. Required. dbname Database name docid Document ID simplify (logical) Simplify character vector revision ids. FALSE, gives back availability info . Default: TRUE (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get document revisions. — db_revisions","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/db_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get document revisions. — db_revisions","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {  db_delete(x, dbname = \"sofadb\") } db_create(x, dbname = \"sofadb\")  doc1 <- '{\"name\": \"drink\", \"beer\": \"IPA\", \"score\": 5}' doc_create(x, dbname=\"sofadb\", doc1, docid=\"abeer\") doc_create(x, dbname=\"sofadb\", doc1, docid=\"morebeer\", as='json')  db_revisions(x, dbname=\"sofadb\", docid=\"abeer\") db_revisions(x, dbname=\"sofadb\", docid=\"abeer\", simplify=FALSE) db_revisions(x, dbname=\"sofadb\", docid=\"abeer\", as='json') db_revisions(x, dbname=\"sofadb\", docid=\"abeer\", simplify=FALSE, as='json') }"},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with design documents — design","title":"Work with design documents — design","text":"Work design documents","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with design documents — design","text":"","code":"design_create(   cushion,   dbname,   design,   fxnname,   key = \"null\",   value = \"doc\",   as = \"list\",   ... )  design_create_(cushion, dbname, design, fxnname, fxn, as = \"list\", ...)  design_delete(cushion, dbname, design, as = \"list\", ...)  design_get(cushion, dbname, design, as = \"list\", ...)  design_head(cushion, dbname, design, ...)  design_info(cushion, dbname, design, ...)"},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with design documents — design","text":"cushion Cushion object. Required. dbname (character) Database name. required. design (character) Design document name. design name without _design/, prepended internally. required. fxnname (character) function name. required view_put view_put_ key, value (character) key value, see Examples Details (character) One list (default) json ... Curl args passed HttpClient fxn (character) javascript function. required view_put_","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with design documents — design","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with design documents — design","text":"design_create slightly easier interface creating design documents; just asks function name, key value, create function internally. flexibility use view_put_ (underscore end) write function .","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with design documents — design","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  file <- system.file(\"examples/omdb.json\", package = \"sofa\") strs <- readLines(file)  ## create a database if (\"omdb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"omdb\")) } db_create(x, dbname='omdb')  ## add the documents invisible(db_bulk_create(x, \"omdb\", strs))  # Create a view, the easy way, but less flexible design_create(x, dbname='omdb', design='view1', fxnname=\"foobar1\") design_create(x, dbname='omdb', design='view2', fxnname=\"foobar2\",   value=\"doc.Country\") design_create(x, dbname='omdb', design='view5', fxnname=\"foobar3\",   value=\"[doc.Country,doc.imdbRating]\")  # the harder way, write your own function, but more flexible design_create_(x, dbname='omdb', design='view22',   fxnname = \"stuffthings\", fxn = \"function(doc){emit(null,doc.Country)}\")  # Delete a view design_delete(x, dbname='omdb', design='view1')  # Get info on a design document ## HEAD request, returns just response headers design_head(x, dbname='omdb', design='view2') design_head(x, dbname='omdb', design='view5') ## GET request, returns information about the design document design_info(x, dbname='omdb', design='view2') design_info(x, dbname='omdb', design='view5')  # Get a design document (GET request) design_get(x, dbname='omdb', design='view2') design_get(x, dbname='omdb', design='view5')  # Search using a view res <- design_search(x, dbname='omdb', design='view2', view='foobar2') head(   do.call(     \"rbind.data.frame\",     lapply(res$rows, function(x) Filter(length, x))   ) )  res <- design_search(x, dbname='omdb', design='view5', view='foobar3') head(   structure(do.call(     \"rbind.data.frame\",     lapply(res$rows, function(x) x$value)   ), .Names = c('Country', 'imdbRating')) ) }"},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search design documents — design_search","title":"Search design documents — design_search","text":"Search design documents","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search design documents — design_search","text":"","code":"design_search(   cushion,   dbname,   design,   view,   params = list(),   body = list(),   as = \"list\",   ... )  design_search_many(cushion, dbname, design, view, queries, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search design documents — design_search","text":"cushion Cushion object. Required. dbname (character) Database name. required. design (character) Design document name. design name without _design/, prepended internally. required. view (character) view, fxn param design_create_(). required. params query parameters. named list body params, given, POST request sent (body non-NULL, params also sent). named list (character) One list (default) json ... Curl args passed HttpClient queries list named lists queries","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search design documents — design_search","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"options-to-pass-to-params-body-or-queries-params","dir":"Reference","previous_headings":"","what":"Options to pass to params, body, or queries params","title":"Search design documents — design_search","text":"conflicts (logical) Includes conflicts information response. Ignored include_docs TRUE. Default: FALSE descending (logical) Return documents descending key order. Default: FALSE endkey,end_key (list) Stop returning records specified key reached. Optional. end_key alias endkey endkey_docid,end_key_doc_id (character) Stop returning records specified document ID reached. Requires endkey specified effect. Optional. end_key_doc_id alias endkey_docid group (logical) Group results using reduce function group single row. Default: FALSE group_level (integer) Specify group level used. Optional include_docs (logical) Include associated document row. Default: FALSE. attachments (logical) Include Base64-encoded content attachments documents included include_docs TRUE. Ignored include_docs TRUE. Default: FALSE att_encoding_info (logical) Include encoding information attachment stubs include_docs TRUE particular attachment compressed. Ignored include_docs TRUE. Default: FALSE. inclusive_end (logical) Specifies whether specified end key included result. Default: TRUE key (list) Return documents match specified key. Optional keys (list) Return documents key matches one keys specified array. Optional limit (integer) Limit number returned documents specified number. Optional reduce (logical)  Use reduction function. Default: TRUE skip (integer)  Skip number records starting return results. Default: 0 sorted (logical)  Sort returned rows (see Sorting Returned Rows). Setting FALSE offers performance boost. total_rows offset fields available set FALSE. Default: TRUE stale (character) Allow results stale view used. Supported values: ok update_after. Optional startkey,start_key (list) Return records starting specified key. Optional. start_key alias startkey startkey_docid,start_key_doc_id (character) Return records starting specified document ID. Requires startkey specified effect. Optional. start_key_doc_id alias startkey_docid update_seq (logical) Response includes update_seq value indicating sequence id database view reflects. Default: FALSE","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search design documents — design_search","text":"https://docs.couchdb.org/en/latest/api/ddoc/views.html","code":""},{"path":"https://docs.ropensci.org/sofa/reference/design_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search design documents — design_search","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  file <- system.file(\"examples/omdb.json\", package = \"sofa\") strs <- readLines(file)  ## create a database if (\"omdb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"omdb\")) } db_create(x, dbname='omdb')  ## add the documents invisible(db_bulk_create(x, \"omdb\", strs))  # Create a view, the easy way, but less flexible design_create(x, dbname='omdb', design='view1', fxnname=\"foobar1\") design_create(x, dbname='omdb', design='view2', fxnname=\"foobar2\",   value=\"doc.Country\") design_create(x, dbname='omdb', design='view5', fxnname=\"foobar3\",   value=\"[doc.Country,doc.imdbRating]\") design_create_(x, dbname='omdb', design='view6', fxnname=\"foobar4\",   fxn = \"function(doc){emit(doc._id,doc.Country)}\")  # Search using a view compact <- function(l) Filter(Negate(is.null), l) res <- design_search(x, dbname='omdb', design='view2', view ='foobar2') head(   do.call(     \"rbind.data.frame\",     Filter(       function(z) length(z) == 2,       lapply(res$rows, function(x) compact(x[names(x) %in% c('id', 'value')]))     )   ) )  res <- design_search(x, dbname='omdb', design='view5', view = 'foobar3') head(   structure(do.call(     \"rbind.data.frame\",     lapply(res$rows, function(x) x$value)   ), .Names = c('Country', 'imdbRating')) )  # query parameters ## limit design_search(x, dbname='omdb', design='view5', view = 'foobar3',   params = list(limit = 5)) ## limit and skip design_search(x, dbname='omdb', design='view5', view = 'foobar3',   params = list(limit = 5, skip = 3)) ## with start and end keys ### important: the key strings have to be in JSON, so here e.g.,  ###  need to add escaped double quotes res <- design_search(   cushion = x,   dbname = 'omdb',   design = 'view6',   view = 'foobar4',   params = list(     startkey = \"\\\"c25bbf4fef99408b3e1115374a03f642\\\"\",     endkey = \"\\\"c25bbf4fef99408b3e1115374a040f11\\\"\"   ) )  # POST request ids <- vapply(db_alldocs(x, dbname='omdb')$rows[1:3], \"[[\", \"\", \"id\") res <- design_search(x, dbname='omdb', design='view6', view = 'foobar4',   body = list(keys = ids), verbose = TRUE) res  # Many queries at once in a POST request queries <- list(   list(keys = ids),   list(limit = 3, skip = 2) ) design_search_many(x, 'omdb', 'view6', 'foobar4', queries) }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create documents to a database. — doc_create","title":"Create documents to a database. — doc_create","text":"Create documents database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create documents to a database. — doc_create","text":"","code":"doc_create(cushion, dbname, doc, docid = NULL, how = \"rows\", as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create documents to a database. — doc_create","text":"cushion Cushion object. Required. dbname Database name3 doc Document content, can character string list. character type can XML well, embedded JSON. document retrieved via doc_get(), XML given back can parse normal. docid Document ID (character) One rows (default) columns. rows, row becomes separate document; columns, column becomes separate document. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create documents to a database. — doc_create","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create documents to a database. — doc_create","text":"Documents can attachments just like email. two ways use attachments: first one via separate REST call (see doc_attach_create()); second inline within document, can fxn. See https://docs.couchdb.org/en/latest/api/document/attachments.html help formatting json appropriately. Note can create documents data.frame function, row column separate document. However, function use bulk API https://couchdb.readthedocs.org/en/latest/api/database/bulk-api.html#db-bulk-docs see db_bulk_create() db_bulk_update() create update documents bulk API - much faster large number documents.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"digits-after-the-decimal","dir":"Reference","previous_headings":"","what":"Digits after the decimal","title":"Create documents to a database. — doc_create","text":"concern number digits decimal documents, make sure look digits R options. default value 7 (see options informnation). can set value like e.g., options(digits = 10), get digits set getOption(\"digits\"). Note doc_create() convert document JSON jsonlite::toJSON() given list, digits parameter. pass getOption(\"digits\") digits parameter jsonlite::toJSON()","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create documents to a database. — doc_create","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, 'sofadb')  # write a document WITH a name (uses PUT) doc1 <- '{\"name\": \"drink\", \"beer\": \"IPA\", \"score\": 5}' doc_create(x, dbname=\"sofadb\", doc1, docid=\"abeer\") doc_create(x, dbname=\"sofadb\", doc1, docid=\"morebeer\", as='json') doc_get(x, dbname = \"sofadb\", docid = \"abeer\") ## with factor class values doc2 <- list(name = as.factor(\"drink\"), beer = \"stout\", score = 4) doc_create(x, doc2, dbname=\"sofadb\", docid=\"nextbeer\", as='json') doc_get(x, dbname = \"sofadb\", docid = \"nextbeer\")  # write a json document WITHOUT a name (uses POST) doc2 <- '{\"name\": \"food\", \"icecream\": \"rocky road\"}' doc_create(x, doc2, dbname=\"sofadb\") doc3 <- '{\"planet\": \"mars\", \"size\": \"smallish\"}' doc_create(x, doc3, dbname=\"sofadb\") ## assigns a UUID instead of a user given name db_alldocs(x, dbname = \"sofadb\")  # write an xml document WITH a name (uses PUT). xml is written as xml in # couchdb, just wrapped in json, when you get it out it will be as xml doc4 <- \"<top><a/><b/><c><d/><e>bob<\/e><\/c><\/top>\" doc_create(x, doc4, dbname=\"sofadb\", docid=\"somexml\") doc_get(x, dbname = \"sofadb\", docid = \"somexml\")  # You can pass in lists that autoconvert to json internally doc1 <- list(name = \"drink\", type = \"soda\", score = 9) doc_create(x, dbname=\"sofadb\", doc1, docid=\"gooddrink\")  # Write directly from a data.frame ## Each row or column becomes a separate document ### by rows if (\"test\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"test\")) } db_create(x, dbname = \"test\") doc_create(x, mtcars, dbname=\"test\", how=\"rows\") doc_create(x, mtcars, dbname=\"test\", how=\"columns\")  if (\"testiris\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"testiris\")) } db_create(x, dbname = \"testiris\") head(iris) doc_create(x, iris, dbname = \"testiris\") }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a document in a database. — doc_delete","title":"Delete a document in a database. — doc_delete","text":"Delete document database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a document in a database. — doc_delete","text":"","code":"doc_delete(cushion, dbname, docid, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/doc_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a document in a database. — doc_delete","text":"cushion Cushion object. Required. dbname Database name. (character) docid Document ID (character) (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a document in a database. — doc_delete","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a document in a database. — doc_delete","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # create a database if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, dbname='sofadb')  doc3 <- \"<top><a/><b/><c><d/><e>bob<\/e><\/c><\/top>\" doc_create(x, dbname=\"sofadb\", doc=doc3, docid=\"newnewxml\") doc_delete(x, dbname=\"sofadb\", docid=\"newnewxml\")  # wrong docid name doc_create(x, dbname=\"sofadb\", doc=doc3, docid=\"newxml\") # doc_delete(x, dbname=\"sofadb\", docid=\"wrongname\") }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a document from a database. — doc_get","title":"Get a document from a database. — doc_get","text":"Get document database.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a document from a database. — doc_get","text":"","code":"doc_get(   cushion,   dbname,   docid,   rev = NULL,   attachments = FALSE,   deleted = FALSE,   revs = FALSE,   revs_info = FALSE,   conflicts = FALSE,   deleted_conflicts = FALSE,   local_seq = FALSE,   as = \"list\",   ... )"},{"path":"https://docs.ropensci.org/sofa/reference/doc_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a document from a database. — doc_get","text":"cushion Cushion object. Required. dbname Database name docid Document ID rev Revision id document get. NULL, gets current revision attachments (logical) Whether include _attachments field. deleted (logical) Whether include _deleted field. revs (logical) Whether include _revisions field. revs_info (logical) Whether include _revs_info field. conflicts (logical) Whether include _conflicts field. deleted_conflicts (logical) Whether include _deleted_conflicts field. local_seq (logical) Whether include _local_seq field. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a document from a database. — doc_get","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a document from a database. — doc_get","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, dbname=\"sofadb\")  # create a document doc1 <- '{\"name\": \"drink\", \"type\": \"drink\", \"score\": 5}' doc_create(x, dbname=\"sofadb\", doc1, docid=\"asoda\")  doc_get(x, dbname=\"sofadb\", docid=\"asoda\") revs <- db_revisions(x, dbname=\"sofadb\", docid=\"asoda\") doc_get(x, dbname=\"sofadb\", docid=\"asoda\", rev=revs[1]) doc_get(x, dbname=\"sofadb\", docid=\"asoda\", as='json') doc_get(x, dbname=\"sofadb\", docid=\"asoda\", revs=TRUE) doc_get(x, dbname=\"sofadb\", docid=\"asoda\", revs=TRUE, local_seq=TRUE) }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Get header info for a document — doc_head","title":"Get header info for a document — doc_head","text":"Get header info document","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get header info for a document — doc_head","text":"","code":"doc_head(cushion, dbname, docid, ...)"},{"path":"https://docs.ropensci.org/sofa/reference/doc_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get header info for a document — doc_head","text":"cushion Cushion object. Required. dbname (character) Database name. Required. docid (character) Document ID. Required. ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get header info for a document — doc_head","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get header info for a document — doc_head","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # create a database if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, dbname='sofadb')  # create a document doc1 <- '{\"name\": \"drink\", \"beer\": \"IPA\", \"score\": 5}' doc_create(x, dbname=\"sofadb\", doc1, docid=\"abeer\")  # run doc_head doc_head(x, dbname=\"sofadb\", docid=\"abeer\") }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a document. — doc_update","title":"Update a document. — doc_update","text":"Update document.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a document. — doc_update","text":"","code":"doc_update(cushion, dbname, doc, docid, rev, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a document. — doc_update","text":"cushion Cushion object. Required. dbname (character) Database name. Required. doc (character) Document content. Required. docid (character) Document ID. Required. rev (character) Revision id. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a document. — doc_update","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a document. — doc_update","text":"Internally, function adds docid revision id, required document update","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a document. — doc_update","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, dbname='sofadb')  doc1 <- '{\"name\":\"drink\",\"beer\":\"IPA\"}' doc_create(x, dbname=\"sofadb\", doc=doc1, docid=\"b_beer\") doc_get(x, dbname = \"sofadb\", docid = \"b_beer\") revs <- db_revisions(x, dbname = \"sofadb\", docid = \"b_beer\") doc2 <- '{\"name\":\"drink\",\"beer\":\"IPA\",\"note\":\"yummy\",\"note2\":\"yay\"}' doc_update(x, dbname=\"sofadb\", doc=doc2, docid=\"b_beer\", rev=revs[1]) db_revisions(x, dbname = \"sofadb\", docid = \"b_beer\") }"},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new document or update an existing one — doc_upsert","title":"Create a new document or update an existing one — doc_upsert","text":"Create new document update existing one","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new document or update an existing one — doc_upsert","text":"","code":"doc_upsert(cushion, dbname, doc, docid)"},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new document or update an existing one — doc_upsert","text":"cushion Cushion object. Required. dbname (character) Database name. Required. doc (character) Document content. Required. docid (character) Document ID. Required.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new document or update an existing one — doc_upsert","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new document or update an existing one — doc_upsert","text":"Internally, function attempts update document given name.  document exist, created","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a new document or update an existing one — doc_upsert","text":"George Kritikos","code":""},{"path":"https://docs.ropensci.org/sofa/reference/doc_upsert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new document or update an existing one — doc_upsert","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  if (\"sofadb\" %in% db_list(x)) {   invisible(db_delete(x, dbname=\"sofadb\")) } db_create(x, 'sofadb')  # create a document doc1 <- '{\"name\": \"drink\", \"beer\": \"IPA\", \"score\": 5}' doc_upsert(x, dbname=\"sofadb\", doc1, docid=\"abeer\")  #update the document doc2 <- '{\"name\": \"drink\", \"beer\": \"lager\", \"score\": 6}' doc_upsert(x, dbname=\"sofadb\", doc2, docid=\"abeer\")   doc_get(x, dbname = \"sofadb\", docid = \"abeer\") }"},{"path":"https://docs.ropensci.org/sofa/reference/documents.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with documents in your CouchDB's. — documents","title":"Work with documents in your CouchDB's. — documents","text":"Work documents CouchDB's.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/documents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with documents in your CouchDB's. — documents","text":"writing complicated javascript function, better Futon CouchDB interface otherwise. following functions working documents: doc_create - Create document, without ID doc_update - Update document doc_get - Get document doc_delete - Delete document doc_head - Get headers document doc_attach_create - Attach something document doc_attach_info - Get info attachment doc_attach_get - Fetch attachment doc_attach_delete - Delete attachment db_alldocs - Get documents db_revisions - Get revisions document","code":""},{"path":"https://docs.ropensci.org/sofa/reference/membership.html","id":null,"dir":"Reference","previous_headings":"","what":"membership — membership","title":"membership — membership","text":"membership","code":""},{"path":"https://docs.ropensci.org/sofa/reference/membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"membership — membership","text":"","code":"membership(cushion, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"membership — membership","text":"cushion Cushion object. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"membership — membership","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"membership — membership","text":"","code":"if (FALSE) { # Create a CouchDB connection client user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  membership(x) membership(x, as = 'json') }"},{"path":"https://docs.ropensci.org/sofa/reference/parse_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse data.frame to json or list by row or column — parse_df","title":"Parse data.frame to json or list by row or column — parse_df","text":"Parse data.frame json list row column","code":""},{"path":"https://docs.ropensci.org/sofa/reference/parse_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse data.frame to json or list by row or column — parse_df","text":"","code":"parse_df(dat, how = \"rows\", tojson = TRUE, ...)"},{"path":"https://docs.ropensci.org/sofa/reference/parse_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse data.frame to json or list by row or column — parse_df","text":"dat (data.frame) data.frame, matrix, tbl_df (character) One rows (default) columns. rows, row becomes separate document; columns, column becomes separate document. tojson (logical) TRUE (default) convert json - FALSE, lists ... args passed jsonlite::toJSON()","code":""},{"path":"https://docs.ropensci.org/sofa/reference/parse_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse data.frame to json or list by row or column — parse_df","text":"Parse data.frame get either rows columns, list json string","code":""},{"path":"https://docs.ropensci.org/sofa/reference/parse_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse data.frame to json or list by row or column — parse_df","text":"","code":"if (FALSE) { parse_df(mtcars, how=\"rows\") parse_df(mtcars, how=\"columns\") parse_df(mtcars, how=\"rows\", tojson=FALSE) parse_df(mtcars, how=\"columns\", tojson=FALSE) }"},{"path":"https://docs.ropensci.org/sofa/reference/ping.html","id":null,"dir":"Reference","previous_headings":"","what":"Ping a CouchDB server — ping","title":"Ping a CouchDB server — ping","text":"Ping CouchDB server","code":""},{"path":"https://docs.ropensci.org/sofa/reference/ping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ping a CouchDB server — ping","text":"","code":"ping(cushion, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/ping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ping a CouchDB server — ping","text":"cushion Cushion object. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/ping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ping a CouchDB server — ping","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/ping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ping a CouchDB server — ping","text":"","code":"if (FALSE) { # initialize a CouchDB connection user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # call ping on the cushion object, or pass the cushion to ping() x$ping() ping(x) ping(x, as = \"json\") }"},{"path":"https://docs.ropensci.org/sofa/reference/restart.html","id":null,"dir":"Reference","previous_headings":"","what":"Restart your Couchdb instance — restart","title":"Restart your Couchdb instance — restart","text":"Restart Couchdb instance","code":""},{"path":"https://docs.ropensci.org/sofa/reference/restart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restart your Couchdb instance — restart","text":"","code":"restart(cushion = \"localhost\", as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/restart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restart your Couchdb instance — restart","text":"cushion Cushion object. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/restart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restart your Couchdb instance — restart","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/restart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restart your Couchdb instance — restart","text":"","code":"if (FALSE) { user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  # restart(x) }"},{"path":"https://docs.ropensci.org/sofa/reference/session.html","id":null,"dir":"Reference","previous_headings":"","what":"session — session","title":"session — session","text":"session","code":""},{"path":"https://docs.ropensci.org/sofa/reference/session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"session — session","text":"","code":"session(cushion, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"session — session","text":"cushion Cushion object. Required. (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"session — session","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"session — session","text":"","code":"if (FALSE) { # Create a CouchDB connection client user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  session(x) session(x, as = 'json') }"},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R client for CouchDB. — sofa-package","title":"R client for CouchDB. — sofa-package","text":"Relax.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"about-sofa","dir":"Reference","previous_headings":"","what":"About sofa","title":"R client for CouchDB. — sofa-package","text":"sofa provides interface NoSQL database CouchDB (http://couchdb.apache.org). Methods provided managing databases within CouchDB, including creating/deleting/updating/transferring, managing documents within databases. One can connect local CouchDB instance, remote CouchDB databases Cloudant (https://cloudant.com). Documents can inserted directly vectors, lists, data.frames, JSON.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"client-connections","dir":"Reference","previous_headings":"","what":"Client connections","title":"R client for CouchDB. — sofa-package","text":"functions take first parameter client connection object, cushion. Create object Cushion. can multiple connection objects R session.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"couchdb-versions","dir":"Reference","previous_headings":"","what":"CouchDB versions","title":"R client for CouchDB. — sofa-package","text":"sofa built assuming CouchDB version 2 greater. functionality package work versions < 2, may (mango queries, see db_query()). plan support older CouchDB versions per se.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"digits-after-the-decimal","dir":"Reference","previous_headings":"","what":"Digits after the decimal","title":"R client for CouchDB. — sofa-package","text":"concern number digits decimal documents, make sure look digits R options. default value 7 (see options informnation). can set value like e.g., options(digits = 10), get digits set getOption(\"digits\"). Note doc_create() convert document JSON jsonlite::toJSON() given list, digits parameter. pass getOption(\"digits\") digits parameter jsonlite::toJSON().","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"defunct-functions","dir":"Reference","previous_headings":"","what":"Defunct functions","title":"R client for CouchDB. — sofa-package","text":"attach_get","code":""},{"path":"https://docs.ropensci.org/sofa/reference/sofa-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R client for CouchDB. — sofa-package","text":"Yaoxiang Li liyaoxiang@outlook.com Scott Chamberlain myrmecocystus@gmail.com Eduard Szöcs eduardszoecs@gmail.com","code":""},{"path":"https://docs.ropensci.org/sofa/reference/uuids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get uuids. — uuids","title":"Get uuids. — uuids","text":"Get uuids.","code":""},{"path":"https://docs.ropensci.org/sofa/reference/uuids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get uuids. — uuids","text":"","code":"uuids(cushion, count = 1, as = \"list\", ...)"},{"path":"https://docs.ropensci.org/sofa/reference/uuids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get uuids. — uuids","text":"cushion Cushion object. Required. count (numeric) Number uuids return. Default: 1 (character) One list (default) json ... Curl args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/sofa/reference/uuids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get uuids. — uuids","text":"JSON character string list (determined parameter)","code":""},{"path":"https://docs.ropensci.org/sofa/reference/uuids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get uuids. — uuids","text":"","code":"if (FALSE) { # Create a CouchDB connection client user <- Sys.getenv(\"COUCHDB_TEST_USER\") pwd <- Sys.getenv(\"COUCHDB_TEST_PWD\") (x <- Cushion$new(user=user, pwd=pwd))  uuids(x) uuids(x, as = 'json') }"},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"sofa-040","dir":"Changelog","previous_headings":"","what":"sofa 0.4.0","title":"sofa 0.4.0","text":"CRAN release: 2020-06-26","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"sofa 0.4.0","text":"new function doc_upsert(): updates existing document creates doesn’t yet exist (#69) work @critichu CouchDB v3 related changes made sure sofa works v3; examples/tests updated use username/password (#73) new function db_bulk_get() /{db}/_bulk_get route (#73) fixed design_search_many(): couch v2.2 greater ’s new route /{db}/_design/{ddoc}/_view/{view}/queries, used fxn now instead using /{db}/_design/{ddoc}/_view/{view} route (#75) Cushion class gains new method $version() get CouchDB version ’re using numeric (enable progammatic couch version checking) db_query() changes: new parameters added: r, bookmark, update, stable, stale, execution_stats (#74)","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"defunct-0-4-0","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"sofa 0.4.0","text":"attach_get() now defunct, use doc_attach_get() (#76)","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"sofa 0.4.0","text":"added tests (#61) design_search() now allows possible values start end keys: startkey_docid, start_key_doc_id, startkey, start_key, endkey_docid, end_key_doc_id, endkey, end_key (#62) add title vignettes (#71) docs_create() internally support using user’s setting R option digits pass jsonlite::toJSON control number digits decimal place (#66)","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"sofa 0.4.0","text":"fixed authorization problems $ping() method Cushion; now separate ping() function calls $ping() method Cushion (#72)","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"sofa-030","dir":"Changelog","previous_headings":"","what":"sofa 0.3.0","title":"sofa 0.3.0","text":"CRAN release: 2018-01-03","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"sofa 0.3.0","text":"Gains new functions db_index, db_index_create, db_index_delete getting index, creating one, deleting one Gains function design_search_many many queries POST request (#56) design_search reworked allow user GET request POST request depending use params parameter body parameter - many parameters removed function definition, now passed params body (#56) db_alldocs gains new parameter disk optionally write data disk instead R session - help data large (disk used fxn returns file path) (#64)","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"sofa 0.3.0","text":"fix minor issues vignette, updated working CouchDB v2 greater (#53) (#54) (#47) replace httr crul HTTP requests (#52) design_copy removed temporarily (#20) (#60) new issue pull request template","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"sofa 0.3.0","text":"Fix docs design_search (#57) thanks @michellymenezes Fix db_query make single field passed fields parameter work (#63) thanks @gtumuluri Fix error doc_attach_get (#58) thanks @gtumuluri","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"sofa-020","dir":"Changelog","previous_headings":"","what":"sofa 0.2.0","title":"sofa 0.2.0","text":"CRAN release: 2016-10-13","code":""},{"path":"https://docs.ropensci.org/sofa/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"sofa 0.2.0","text":"released CRAN","code":""}]
